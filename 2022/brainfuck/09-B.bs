include "09-common"

def impure main() {
  pushi(0) // buffer
  pushi(32768500) // first pos
  pushi(0) // buffer
  pushi(0) // buffer
  pushi(0) // buffer
  pushi(0) // buffer
  pushi(0) // buffer
  pushi(0) // buffer
  pushi(500) // knot #0 x
  pushi(500) // knot #0 y
  pushi(500) // knot #1 x
  pushi(500) // knot #1 y
  pushi(500) // knot #2 x
  pushi(500) // knot #2 y
  pushi(500) // knot #3 x
  pushi(500) // knot #3 y
  pushi(500) // knot #4 x
  pushi(500) // knot #4 y
  pushi(500) // knot #5 x
  pushi(500) // knot #5 y
  pushi(500) // knot #6 x
  pushi(500) // knot #6 y
  pushi(500) // knot #7 x
  pushi(500) // knot #7 y
  pushi(500) // knot #8 x
  pushi(500) // knot #8 y
  pushi(500) // knot #9 x
  pushi(500) // knot #9 y

  push_read while(dupc c_to_b) {
    if (eqc_('D')) {
      readc popc read_number
      while (gti_(0)) {
        // copy counter far ahead to free local space
        pushi(-1) addi move_counter
        prints("D:")
        // step
        rolli19(18) pushi(-1) addi rolli19(1)
        allFollow
        if (dupb) {
          popb
          // add new position to list
          store_point
          pushb(true)
        }
        if (dupb not) {
          popb
          retrieve_counter
          pushb(false)
        }
        popb endl
      }
      popi
      pushc(0)
    }
    if (eqc_('U')) {
      readc popc read_number
      while (gti_(0)) {
        // copy counter far ahead to free local space
        pushi(-1) addi move_counter
        prints("U:")
        // step
        rolli19(18) pushi(1) addi rolli19(1)
        allFollow
        if (dupb) {
          popb
          // add new position to list
          store_point
          pushb(true)
        }
        if (dupb not) {
          popb
          retrieve_counter
          pushb(false)
        }
        popb endl
      }
      popi
      pushc(0)
    }
    if (eqc_('L')) {
      readc popc read_number
      while (gti_(0)) {
        // copy counter far ahead to free local space
        pushi(-1) addi move_counter
        prints("L:")
        // step
        rolli20(19) pushi(-1) addi rolli20(1)
        allFollow
        if (dupb) {
          popb
          // add new position to list
          store_point
          pushb(true)
        }
        if (dupb not) {
          popb
          retrieve_counter
          pushb(false)
        }
        popb endl
      }
      popi
      pushc(0)
    }
    if (eqc_('R')) {
      readc popc read_number
      while (gti_(0)) {
        // copy counter far ahead to free local space
        pushi(-1) addi move_counter
        prints("R:")
        // step
        rolli20(19) pushi(1) addi rolli20(1)
        allFollow
        if (dupb) {
          popb
          // add new position to list
          store_point
          pushb(true)
        }
        if (dupb not) {
          popb
          retrieve_counter
          pushb(false)
        }
        popb endl
      }
      popi
      pushc(0)
    }
    popc
    push_read
  }
  popc popi
  popi popi popi popi popi
  popi popi popi popi popi
  popi popi popi popi popi
  popi popi popi popi popi
  popi popi popi popi popi

  prints("Count: ")
  // count items all the way down
  pushi(0) swapi
  while(not0) { // while we are on a point
    popi pushi(1) addi swapi
  }
  popi printi endl
}

def impure store_point() {
  dupi2 merge prints(" ") printi

  // copy the point at the top of the list
  [-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]<
  [-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]<
  [-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]<
  [-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]<
  <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  insert

  // copy the boolean that tells us if a point was inserted
  [->>>>+<<<<]
  < retrieve_counter >

  // if true: we inserted a value, roll by 4
  if (dupb) {
    popb
    >>>>
    rolli22(1)
    pushb(false)
  }
  popb
}

def allFollow()
  [I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I] ->
  [I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,I,B] {
  rolli20(16) follow popb
  rolli20(18) follow popb
  rolli20(18) follow popb
  rolli20(18) follow popb
  rolli20(18) follow popb
  rolli20(18) follow popb
  rolli20(18) follow popb
  rolli20(18) follow popb
  rolli20(18) follow
}

def impure insert() {
  // is this item a duplicate?
  while (dupi2 lti) {
    swapi
    [->>>>>>>>>>>>+<<<<<<<<<<<<]<
    [->>>>>>>>>>>>+<<<<<<<<<<<<]<
    [->>>>>>>>>>>>+<<<<<<<<<<<<]<
    [->>>>>>>>>>>>+<<<<<<<<<<<<]<
  }
  // do we want to keep this item?
  dupi2 nei
  if (dupb) {
    // we are in the case where we DO want to insert the value
    popb
    >>>>>>>>>>>>
    >[-<<<<<<<<<<<<+>>>>>>>>>>>>]
    >[-<<<<<<<<<<<<+>>>>>>>>>>>>]
    >[-<<<<<<<<<<<<+>>>>>>>>>>>>]
    >[-<<<<<<<<<<<<+>>>>>>>>>>>>]
    <<<<<<<<<<<<
    while (not0) {
      >>>>>>>>>>>>
      >[-<<<<<<<<<<<<+>>>>>>>>>>>>]
      >[-<<<<<<<<<<<<+>>>>>>>>>>>>]
      >[-<<<<<<<<<<<<+>>>>>>>>>>>>]
      >[-<<<<<<<<<<<<+>>>>>>>>>>>>]
      <<<<<<<<<<<<
    }
    >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    pushb(true)
  }
  if (dupb not) {
    // we are in the case where we don't want to insert the value
    popb
    popi
    >>>>>>>>>>>>>>>>
    >[-<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>]
    >[-<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>]
    >[-<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>]
    >[-<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>]
    <<<<<<<<<<<<<<<<
    while (not0) {
      >>>>>>>>>>>>>>>>
      >[-<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>]
      >[-<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>]
      >[-<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>]
      >[-<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>]
      <<<<<<<<<<<<<<<<
    }
    >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    prints(" (duplicate)")
    pushb(false)
  }
  // do NOT pop the boolean! we can know if an item was inserted
}
