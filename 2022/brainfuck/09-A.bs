def impure main() {
  pushi(0) // buffer
  pushi(0) // buffer
  pushi(0) // end of list signal
  pushi(500) // head x
  pushi(500) // head y
  pushi(500) // tail x
  pushi(500) // tail y

  prints("Positions:\n")
  push_read while(dupc c_to_b) {
    if (eqc_('D')) {
      readc popc read_number
      while (gti_(0)) {
        // copy counter far ahead to free local space
        pushi(-1) addi move_counter
        prints("D: ")
        // step
        rolli3(2) pushi(-1) addi rolli3(1)
        follow
        // add new position to list
        store_point
      }
      popi
      pushc(0)
    }
    if (eqc_('U')) {
      readc popc read_number
      while (gti_(0)) {
        // copy counter far ahead to free local space
        pushi(-1) addi move_counter
        prints("U: ")
        // step
        rolli3(2) pushi(1) addi rolli3(1)
        follow
        // add new position to list
        store_point
      }
      popi
      pushc(0)
    }
    if (eqc_('L')) {
      readc popc read_number
      while (gti_(0)) {
        // copy counter far ahead to free local space
        pushi(-1) addi move_counter
        prints("L: ")
        // step
        rolli4(3) pushi(-1) addi rolli4(1)
        follow
        // add new position to list
        store_point
      }
      popi
      pushc(0)
    }
    if (eqc_('R')) {
      readc popc read_number
      while (gti_(0)) {
        // copy counter far ahead to free local space
        pushi(-1) addi move_counter
        prints("R: ")
        // step
        rolli4(3) pushi(1) addi rolli4(1)
        follow
        // add new position to list
        store_point
      }
      popi
      pushc(0)
    }
    popc
    push_read
  }
  popc popi popi popi popi
  prints("Sorted:\n")
  sort

  prints("Fold:\n")
  // count items all the way down
  pushi(0) rolli3(1)
  while(not0) { // while we are on a point
    // are the two next points the same?
    dupi2 nei
    if (dupb) {
      popb
      printi endl
      // they are different! increase count by 1
      popi swapi pushi(1) addi rolli3(1)
      pushb(true)
    }
    if (dupb not) {
      popb
      // they are the same: skip it
      popi swapi rolli3(1)
      pushb(true)
    }
    popb
  }
  popi popi printi endl
}

def impure store_point() {
  dupi2 merge printi
  rolli6(5)
  dupi2 eqi
  if (dupb) {
    popb
    popi
    rolli5(1)
    >>>>
    retrieve_counter
    [-<<<<+>>>>]<
    [-<<<<+>>>>]<
    [-<<<<+>>>>]<
    [-<<<<+>>>>]<
    pushb(true)
    prints(" (removed)")
  }
  if (dupb not) {
    popb
    swapi
    rolli6(2)
    retrieve_counter
    pushb(true)
  }
  popb
  endl
}


def impure move_counter() {
  [->>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<]<
  [->>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<]<
  [->>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<]<
  [->>>>>>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<<<<<]<
}

def impure retrieve_counter() {
  >>>>>>>>>>>>>>>>>>>
  > [-<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>]
  > [-<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>]
  > [-<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>]
  > [-<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>]
  <<<<<<<<<<<<<<<<<<<
}

def impure merge() {
  [-<<<<<<+>>>>>>]<
  [-<<<<<<+>>>>>>]<
  [-]<
  [-]<
}

def follow() [I,I,I,I,I] -> [I,I,I,I,I] {
  // [HX,HY,TX,TY]
  // compute the distance
  dupi4 swapi
  rolli3(1) subi abs
  rolli3(1) subi abs
  maxi
  if (gti_(1)) {
    popi
    dupi4 swapi
    rolli3(1) subi signum
    rolli3(1) subi signum
    // TX TY DY DX
    rolli4(3)
    // TY DY DX TX
    subi
    rolli3(1) swapi
    // TX DY TY
    subi
    pushi(0)
  }
  popi
}

def impure sort() {
  // while there's at least one item left
  while(not0) {
    // while we're on an item
    while(not0) {
      // sort those two items
      if (dupi2 lti) { swapi }
      // move the bigger one far away to free some local buffer
      move_far
      // go to next item
      <<<<
    }
    // we've reached the end, copy the lowest element back
    >>>> move_back
    // and put it behind the 0, so that it's "out"
    // swap inlined into a copy for optimization
    [-<<<<+>>>>]<
    [-<<<<+>>>>]<
    [-<<<<+>>>>]<
    [-<<<<+>>>>]<
    printi endl

    // copy everything back
    >>>>>>>> move_back
    while(not0) {
      >>>> move_back
    }
    <<<<
  }
  <<<<
}

def impure not0() [I] -> [I,B] {
  dupi
  [[-]>+<]<
  [[-]>>+<<]<
  [[-]>>>+<<<]<
  [[-]>>>>+<<<<]>>>>
  [[-]<<<<+>>>>]<<<<
}

def impure move_far() {
  [->>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<]<
  [->>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<]<
  [->>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<]<
  [->>>>>>>>>>>>>>>>>>>+<<<<<<<<<<<<<<<<<<<]>>>
}

def impure move_back() {
  >>>>>>>>>>>>>>>>>>>
  [-<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>]<
  [-<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>]<
  [-<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>]<
  [-<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>]>>>
  <<<<<<<<<<<<<<<<<<<
}

def abs() [I] -> [I] {
  if (lti_(0)) { pushi(0) subi }
}

def signum() [I] -> [I] {
  if (lti_(0)) { popi pushi(-1) }
  if (gti_(0)) { popi pushi( 1) }
}

def impure read_number() [] -> [I] {
  pushi(0)
  push_read
  while(nec_('\n')) {
    pushc('0')
    swapc
    subc
    c_to_i
    swapi
    pushi(10)
    muli
    addi
    push_read
  }
  popc
}
