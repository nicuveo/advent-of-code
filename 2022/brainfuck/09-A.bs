include "09-common"

def impure main() {
  pushi(0) // buffer
  pushi(32768500) // first pos
  pushi(0) // buffer
  pushi(0) // buffer
  pushi(0) // buffer
  pushi(0) // buffer
  pushi(0) // buffer
  pushi(0) // buffer
  pushi(500) // head x
  pushi(500) // head y
  pushi(500) // tail x
  pushi(500) // tail y

  push_read while(dupc c_to_b) {
    if (eqc_('D')) {
      readc popc read_number
      while (gti_(0)) {
        // copy counter far ahead to free local space
        pushi(-1) addi move_counter
        prints("D:")
        // step
        rolli3(2) pushi(-1) addi rolli3(1)
        follow
        if (dupb) {
          popb
          // add new position to list
          store_point
          pushb(true)
        }
        if (dupb not) {
          popb
          retrieve_counter
          pushb(false)
        }
        popb endl
      }
      popi
      pushc(0)
    }
    if (eqc_('U')) {
      readc popc read_number
      while (gti_(0)) {
        // copy counter far ahead to free local space
        pushi(-1) addi move_counter
        prints("U:")
        // step
        rolli3(2) pushi(1) addi rolli3(1)
        follow
        if (dupb) {
          popb
          // add new position to list
          store_point
          pushb(true)
        }
        if (dupb not) {
          popb
          retrieve_counter
          pushb(false)
        }
        popb endl
      }
      popi
      pushc(0)
    }
    if (eqc_('L')) {
      readc popc read_number
      while (gti_(0)) {
        // copy counter far ahead to free local space
        pushi(-1) addi move_counter
        prints("L:")
        // step
        rolli4(3) pushi(-1) addi rolli4(1)
        follow
        if (dupb) {
          popb
          // add new position to list
          store_point
          pushb(true)
        }
        if (dupb not) {
          popb
          retrieve_counter
          pushb(false)
        }
        popb endl
      }
      popi
      pushc(0)
    }
    if (eqc_('R')) {
      readc popc read_number
      while (gti_(0)) {
        // copy counter far ahead to free local space
        pushi(-1) addi move_counter
        prints("R:")
        // step
        rolli4(3) pushi(1) addi rolli4(1)
        follow
        if (dupb) {
          popb
          // add new position to list
          store_point
          pushb(true)
        }
        if (dupb not) {
          popb
          retrieve_counter
          pushb(false)
        }
        popb endl
      }
      popi
      pushc(0)
    }
    popc
    push_read
  }
  popc
  popi popi popi popi popi
  popi popi popi popi popi

  prints("Count: ")
  // count items all the way down
  pushi(0) swapi
  while(not0) { // while we are on a point
    popi pushi(1) addi swapi
  }
  popi printi endl
}

def impure store_point() {
  dupi2 merge prints(" ") printi

  // copy the point at the top of the list
  [-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]<
  [-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]<
  [-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]<
  [-<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>]<
  <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  insert

  // copy the boolean that tells us if a point was inserted
  [->>>>+<<<<]
  < retrieve_counter >

  // if true: we inserted a value, roll by 4
  if (dupb) {
    popb
    >>>>
    rolli6(1)
    pushb(false)
  }
  popb
}

def impure insert() {
  // is this item a duplicate?
  while (dupi2 lti) {
    swapi
    [->>>>>>>>>>>>+<<<<<<<<<<<<]<
    [->>>>>>>>>>>>+<<<<<<<<<<<<]<
    [->>>>>>>>>>>>+<<<<<<<<<<<<]<
    [->>>>>>>>>>>>+<<<<<<<<<<<<]<
  }
  // do we want to keep this item?
  dupi2 nei
  if (dupb) {
    // we are in the case where we DO want to insert the value
    popb
    >>>>>>>>>>>>
    >[-<<<<<<<<<<<<+>>>>>>>>>>>>]
    >[-<<<<<<<<<<<<+>>>>>>>>>>>>]
    >[-<<<<<<<<<<<<+>>>>>>>>>>>>]
    >[-<<<<<<<<<<<<+>>>>>>>>>>>>]
    <<<<<<<<<<<<
    while (not0) {
      >>>>>>>>>>>>
      >[-<<<<<<<<<<<<+>>>>>>>>>>>>]
      >[-<<<<<<<<<<<<+>>>>>>>>>>>>]
      >[-<<<<<<<<<<<<+>>>>>>>>>>>>]
      >[-<<<<<<<<<<<<+>>>>>>>>>>>>]
      <<<<<<<<<<<<
    }
    >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    pushb(true)
  }
  if (dupb not) {
    // we are in the case where we don't want to insert the value
    popb
    popi
    >>>>>>>>>>>>>>>>
    >[-<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>]
    >[-<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>]
    >[-<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>]
    >[-<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>]
    <<<<<<<<<<<<<<<<
    while (not0) {
      >>>>>>>>>>>>>>>>
      >[-<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>]
      >[-<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>]
      >[-<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>]
      >[-<<<<<<<<<<<<<<<<+>>>>>>>>>>>>>>>>]
      <<<<<<<<<<<<<<<<
    }
    >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    prints(" (duplicate)")
    pushb(false)
  }
  // do NOT pop the boolean! we can know if an item was inserted
}
