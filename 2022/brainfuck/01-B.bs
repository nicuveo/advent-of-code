def is_newline() [C] -> [C,B] {
  eqc_('\n')
}

def not_eof() [C] -> [C,B] {
  nec_(0)
}

def add_digit() [I,C] -> [I] {
  pushc('0')
  swapc
  subc
  c_to_i
  swapi
  pushi(10)
  swapi
  muli
  addi
}

def impure main() {
  // buffer
  pushi(0)
  // start of list
  pushi(0)
  // current elf
  pushi(0)
  // current line
  pushi(0)
  // process all input
  push_read
  while(not_eof) {
    if (is_newline) {
      popc
      if (nei_(0)) {
        addi
      }
      pushi(0)
      pushc('\n')
    }
    if(is_newline not) {
      add_digit
      pushc(0)
    }
    popc
    push_read
  }
  popc
  while(eqi_(0)) {
    popi
  }
  // bubble sort!!!
  // while there's at least one item left
  while(nei_(0)) {
    // while we're on an item
    while(nei_(0)) {
      // sort those two items
      dupi2 lti [- < swapi >] <
      // move the bigger one far away to free some local buffer
      [->>>>>>>>>>>>+<<<<<<<<<<<<]<
      [->>>>>>>>>>>>+<<<<<<<<<<<<]<
      [->>>>>>>>>>>>+<<<<<<<<<<<<]<
      [->>>>>>>>>>>>+<<<<<<<<<<<<]<
    }
    // we've reached the end, copy the lowest element back
    >>>>>>>>>>>>
    > [-<<<<<<<<<<<<+>>>>>>>>>>>>]
    > [-<<<<<<<<<<<<+>>>>>>>>>>>>]
    > [-<<<<<<<<<<<<+>>>>>>>>>>>>]
    > [-<<<<<<<<<<<<+>>>>>>>>>>>>]
    <<<<<<<<<<<<
    // and put it behind the 0, so that it's "out"
    swapi

    // copy everything back: since we're on a 0, we don't use a while,
    // we force the first iteration of the loop.
    >+
    [-<
      >>>>>>>>>>>>
      > [-<<<<<<<<<<<<+>>>>>>>>>>>>]
      > [-<<<<<<<<<<<<+>>>>>>>>>>>>]
      > [-<<<<<<<<<<<<+>>>>>>>>>>>>]
      > [-<<<<<<<<<<<<+>>>>>>>>>>>>]
      <<<<<<<<<<<<
      nei_(0)
    ]
    <<<<<
  }
  <<<<
  // We're at the top of the sorted list: we add the three top values
  // and print the result.
  addi addi printi endl
}
