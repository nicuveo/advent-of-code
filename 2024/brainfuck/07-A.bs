def is_digit() [C] -> [C,B] {
  dec('0')
  ltc_(10)
}

def impure read_number() [] -> [I,B] {
  pushi(0)
  push_read
  while (is_digit) {
    c_to_i
    swapi
    pushi(10)
    muli
    addi
    push_read
  }
  // [I,C]
  inc('0')
  pushc(' ')
  eqc
}

def impure move_left() {
  // [a, b, 0]
  <<<< swapi
  // [b, a, 0]
  [[>>>>+<<<<-]>>+<<]>>[<<+>>-]<<<
  [[>>>>+<<<<-]>+<]<
  [[>>>>+<<<<-]>>+<<]<
  [[>>>>+<<<<-]>>>+<<<]>>>
  // [b, r, a]
}

def impure move_two_zeroes_left() {
  // [a, 0, 0]
  <<<<
  [[>>>>>>>>+<<<<<<<<-]>+<]<
  [[>>>>>>>>+<<<<<<<<-]>>+<<]<
  [[>>>>>>>>+<<<<<<<<-]>>>+<<<]<
  [[>>>>>>>>+<<<<<<<<-]>>>>+<<<<]
  >>>>[-<+>]<
  // [r, 0, a]
}

def impure move_zero_right() {
  // [0, a]
  >>>>
  [[<<<<+>>>>-]<<<<<+>>>>>]<<<<<[->>>>>+<<<<<]>>>>
  [[<<<<+>>>>-]>+<]<
  [[<<<<+>>>>-]>>+<<]<
  [[<<<<+>>>>-]>>>+<<<]>>>
  // [a, r]
}

def impure process_line() {
  read_number
  popc
  if (nei_(0)) {
    push_read
    popc
    pushi(0)
    pushi(0)
    // [result, total, 0, 0]
    read_number
    popc
    pushi(0)
    // [result, total, 0, 0, first, 0]
    rolli5(4)
    // [result, 0, 0, first, 0, total]
    pushi(1)
    while (eqi_(1)) {
      // [result, 0, 0, [oldList], 0, total, continue]
      popi
      read_number
      b_to_i
      // [result, 0, [newList], 0, [oldList], 0, total, newNumber, continue]
      while (rolli5(4) nei_(0)) {
        // [result, 0, [newList], 0, [oldList-1], 0, total, newNumber, continue, oldNumber]
        dupi
        // [....newNumber, continue, oldNumber, oldNumber]
        rolli4(3)
        // [....continue, oldNumber, oldNumber, newNumber]
        dupi
        dupi
        // [....continue, oldNumber, oldNumber, newNumber, newNumber, newNumber]
        rolli6(1)
        // [....newNumber, continue, oldNumber, oldNumber, newNumber, newNumber]
        rolli3(1)
        // [....newNumber, continue, oldNumber, newNumber, oldNumber, newNumber]
        addi
        rolli3(1)
        muli
        // [....newNumber, continue, sum, product]

        pushi(0)
        rolli7(2)
        // [result, 0, [newList], 0, [oldList-1], product, 0, 0, total, newNumber, continue, sum]
        <<<<<<<<<<<<<<<<<<<<
        + [ [-] move_left ]
        // [result, 0, [newList], product, 0, 0, [oldList-1], 0, total, newNumber, continue, sum]
        >>>> + [ [-] move_zero_right ]
        // [result, 0, [newList], product, 0, [oldList-1], 0, 0, total, newNumber, continue, sum]
        >>>>>>>>>>>>>>>>

        rolli6(1)
        // [result, 0, [newList], product, 0, [oldList-1], sum, 0, 0, total, newNumber, continue]
        <<<<<<<<<<<<<<<<
        + [ [-] move_left ]
        // [result, 0, [newList], product, sum, 0, 0, [oldList-1], 0, total, newNumber, continue]
        >>>> + [ [-] move_zero_right ]
        // [result, 0, [newList], product, sum, 0, [oldList-1], 0, 0, total, newNumber, continue]
        >>>>>>>>>>>>

        rolli4(3)
        popi
        // [result, 0, [newList+2], 0, [oldList-1], 0, total, newNumber, continue]
      }

      #
      // [result, 0, [newList], 0, total, newNumber, continue, 0]
      popi
      swapi
      popi
      // [result, 0, [newList], 0, total, continue]
      pushi(0)
      pushi(0)
      rolli5(2)

      // [result, 0, [newList], 0, 0, 0, total, continue]
      <<<<<<<<<<<<<<<< + [ [-] move_two_zeroes_left ]

      #

      // [result, 0, 0, 0, [oldList], 0, total, continue]
      >>>>>>>> + [ [-] move_zero_right ]

      #

      // [result, 0, 0, [oldList], 0, 0, total, continue]
      >>>>>>>>
      rolli3(2)
      popi

      #
    }
    popi
    // [result, 0, 0, [oldList], a, total]
    while (rolli3(2) nei_(0)) {
      // [result, 0, 0, [oldList], a, total, oldNumber]
      dupi2 eqi b_to_i
      // [result, 0, 0, [oldList], a, total, oldNumber, same]
      rolli4(3)
      // [result, 0, 0, [oldList], total, oldNumber, same, a]
      addi
      // [result, 0, 0, [oldList], total, oldNumber, a]
      rolli3(1)
      // [result, 0, 0, [oldList], a, total, oldNumber]
      popi
      // [result, 0, 0, [oldList], a, total]
    }
    // [result, 0, a, total, 0]
    popi
    swapi
    printi endl
    i_to_b b_to_i
    // [result, 0, total, b]
    muli
    swapi
    popi
    addi
    pushi(1)
  }
}

def impure main() {
  pushi(0)
  pushi(1)
  while (nei_(0)) {
    popi
    process_line
  }
  popi
  prints("result: ")
  printi endl
}
